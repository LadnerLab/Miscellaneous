#!/usr/bin/env python3
import sys
import argparse
import protein_oligo_library as oligo


def main():
    argp = argparse.ArgumentParser( description = "Calculate mean scores (IUPred/MoreRONN) for a set of peptide probes, "
                                                  "report number of positions greater than a certain threshold."
                                  )

    argp.add_argument( '--probes', '-p', help = "FASTA file containing probes to check. "
                       "Positions from original sequence must be in name (generated by kmer_oligo)."
                     )
    argp.add_argument( '--iupred', help = "File containing transformed IUPred scores." )
    argp.add_argument( '--more_ronn', help = "File containing transformed MoreRONN scores." )

    args = argp.parse_args()

    sequences = parse_fasta( args.probes )
    moron_scores = scores_to_dict( args.more_ronn )
    iupred_scores = scores_to_dict( args.iupred )


def scores_to_dict( fname ):
    to_float = lambda x: map( float, x.strip().split( ',' ) )

    out = dict()
    with open( fname, 'r' ) as of:
        for lineno, line in enumerate( of ):
            if lineno: # skip header
                seq_name, scores = line.strip().split( '\t' )
                out[ seq_name ] = list( to_float( scores ) )

    return out

def parse_fasta( fname ):
    names, sequences = oligo.read_fasta_lists( fname )

    return [ Sequence( n, s ) for n, s in zip( names, sequences ) ]

class Sequence:
    def __init__( self, name = "", seq = "" ):
        self.name = name
        self.seq = seq

    def get_name( self ):
        return self.name

    def get_seq( self ):
        return self.seq

class SequenceWithLocation( Sequence ):
    def __init__( self, name = "", seq = "" ):
        super().__init__( name = name, seq = seq )

        self.start = 0
        self.end = 0

    def get_locations( self ):
        if not self.start:
            self.start = self.find_start()
        if not self.end:
            self.end = self.find_end()
        return ( self.start, self.end )

    def find_start( self ):
        pass

    def find_end( self ):
        pass
        

if __name__ == '__main__':
    main()
